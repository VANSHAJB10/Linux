Docker- 
A tool that manages, and scale containers.
No need to install new OS to run different applications


It makes it possible to get far more apps running on the same old servers and it also makes it very easy to package and ship programs
-- Why embrace docker?
--> Containers, use shared operating systems. This means they are much more efficient than hypervisors in system resource terms. Instead of virtualizing hardware, containers rest on top of a single Linux instance. This means you can "leave behind the useless 99.9 percent VM junk, leaving you with a small, neat capsule containing your application". 
With a perfectly tuned container system, you can have as many as four-to-six times the number of server application instances as you can using Xen or KVM VMs on the same hardware.

Docker does not require an installed OS.

Useful Docker commands--
docker –version
docker pull
docker run
docker ps
docker ps -a
docker exec
docker stop
docker kill
docker commit
docker login
docker push
docker images
docker rm
docker rmi
docker build


get apt -- command to ...


WSL --- Window subsystem for Linux 
feature in windows 10 and + for using linux commands inside windows.

- Needs to be turned on to use Docker desktop
- 


Containerisation --
to remove dependiencies on OS containers/Machine specification are used 


What is the difference between Kill and Terminate??

ps-- current running things
ps -l -- shows all the things which were done cureent+ stoped along with their proper execution time

rm -- remove, things are removed from docker only , can be used in future
rm -i -- things are removed from host machine also, they are permanently deleted


CONTAINER 
- Have base  images but NO Operating system
- lightweight than VMs
- docker files have base-files (just like stdio.h of c++)
- One OS can run all the applications with the help of containers


You may have multuiple containers
- one maybe running the frontend and other running the backend




Hypervisor vs Container
- One machine is virtually divided into new machines(VMs)  -- (multiple applications run on different OS (OS of VM) ).
- Only one OS and on top of it we have a Container engine  -- (multiple applications run on a single OS)







- Kubernetes 
   - Open source platform, created by google
   - manage diff containers
   - can't create container
   - how will 100 containers be managed??? with help of ports
   - it has a host and the host has multiple ports and each port has multiple containers
   - if workload immediately increases then it will create one more port automatically and when requirement decreases then the ports dismental automatically


Hardware Units:
Node: the smallest unit of computing hardware in Kubernetes, easily thought of as one individual machine.
Cluster: a collection of nodes that are grouped together to provide intelligent resources sharing and balancing.

Software units
Linux container: a set of one or more processes, including all necessary files to run, making them portable across machines.
Kubernetes pod: a collection of one or more Linux containers, packaged together to maximize the benefits of resource sharing via cluster management.

Individual hardware is represented in Kubernetes as a node. Multiple of those nodes are collected into clusters, allowing compute power to be distributed as needed. Running on those clusters are pods, which ensures that any tightly coupled containers within them will be run together on the same cluster

PODS:
A Kubernetes pod is a collection of one or more Linux® containers, and is the smallest unit of a Kubernetes application. 
Any given pod can be composed of multiple, tightly coupled containers (an advanced use case) or just a single container (a more common use case). 
Containers are grouped into Kubernetes pods in order to increase the intelligence of resource sharing.

Within the Kubernetes system, containers in the same pod will share the same compute resources. These compute resources are pooled together in Kubernetes to form clusters, which can provide a more powerful and intelligently distributed system for executing applications. 

The relationship of pods to clusters is why Kubernetes does not run containers directly, instead running pods to ensure that each container within them shares the same resources and local network. Grouping containers in this way allows them to communicate between each other as if they shared the same physical hardware, while still remaining isolated to some degree.



DOCKER IMAGE INSTALLATION --
- go to hub.docker.com
- downlaod image (by running command in cmd)
- run image by this command:
   docker run -it --rm -p 5000:5000 nadav42/minesweeper
               |    |   |   |    |           |
   initialize   remove port image&container  name of image 
